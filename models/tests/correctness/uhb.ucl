/* 
    Copyright (c) 2021 Yatin Manerkar (UC Berkeley/Michigan). All rights reserved. 
*/

// UCLID TEST
// Solver=z3
// Result=Some(false)
// Option=optimize 0
// Rewrite=blast-enum-quantifiers

type RANGE = enum {zero, one, two, three};

type uopType_t = enum {Read, Write, Fence};

type uhbNode_t =
    record
    {
        nExists : boolean,
        nTime : integer
    };

type microop_t =
    record
    {
        valid : boolean,
        globalID : integer,
        coreID : integer,
        uopType : uopType_t,
        virtAddr : integer,
        physAddr : integer,
        data : integer
    };

type instrIndex_t = RANGE;

const maxTimestamp : integer = 20;

type test_t = [instrIndex_t]microop_t;

//Uspec primitives.
define IsLoad (i : microop_t) : boolean = (i.uopType == Read);
define IsStore (i : microop_t) : boolean = (i.uopType == Write);
define IsFence (i : microop_t) : boolean = (i.uopType == Fence);
define AddEdge (src, dest : uhbNode_t) : boolean = (src.nExists == true && dest.nExists == true && src.nTime < dest.nTime);
define EdgeExists (src, dest : uhbNode_t) : boolean = (AddEdge(src, dest));
define ProgramOrder (i, j : microop_t) : boolean = (i.globalID < j.globalID && i.coreID == j.coreID);
define SameCore (i, j : microop_t) : boolean = (i.coreID == j.coreID);
define SamePhysicalAddress (i, j : microop_t) : boolean = (i.physAddr == j.physAddr);
define SameData (i, j : microop_t) : boolean = (i.data == j.data);
define DataFromInitialStateAtPA (i : microop_t) : boolean = (i.data == 0); //We're assuming 0 is the initial state here.
define SameMicroop (i, j : microop_t) : boolean = (i.globalID == j.globalID);

//Preventing use of invalid uops.
define IsValid (i : microop_t) : boolean = i.valid;
define nullified (n : uhbNode_t) : boolean = (n.nExists == false && n.nTime == 0);

type nodeList_t =
    record
    {
        Fetch : uhbNode_t,
        Execute : uhbNode_t,
        Writeback : uhbNode_t
    };

//Now the sourcing.
define NoWritesBetweenSourceAndRead (ind1 : instrIndex_t, testInstrs : test_t, nodes : [instrIndex_t]nodeList_t) : boolean =
    exists (indW1 : instrIndex_t) ::
        IsValid(testInstrs[indW1]) && IsStore(testInstrs[indW1]) && SamePhysicalAddress(testInstrs[ind1], testInstrs[indW1]) &&
        SameData(testInstrs[ind1], testInstrs[indW1]) && AddEdge(nodes[indW1].Writeback, nodes[ind1].Execute) &&
        (
            forall (indW2 : instrIndex_t) ::
            !(
                    IsValid(testInstrs[indW2]) && IsStore(testInstrs[indW2]) && SamePhysicalAddress(testInstrs[ind1], testInstrs[indW2]) &&
                    EdgeExists(nodes[indW1].Writeback, nodes[indW2].Writeback) &&
                    EdgeExists(nodes[indW2].Writeback, nodes[ind1].Execute)
                )
        );

define BeforeOrAfterEveryWriteToSamePA (ind1 : instrIndex_t, testInstrs : test_t, nodes : [instrIndex_t]nodeList_t) : boolean =
    forall (indW : instrIndex_t) ::
        IsValid(testInstrs[indW]) ==>
        (
            IsStore(testInstrs[indW]) && SamePhysicalAddress(testInstrs[ind1], testInstrs[indW]) ==>
                AddEdge(nodes[indW].Writeback, nodes[ind1].Execute) ||
                AddEdge(nodes[ind1].Execute, nodes[indW].Writeback)
        );

//The parser had some issues with this without the parentheses.
define BeforeAllWrites (ind1 : instrIndex_t, testInstrs : test_t, nodes : [instrIndex_t]nodeList_t) : boolean =
(
    DataFromInitialStateAtPA(testInstrs[ind1]) &&
    (
        forall (indW : instrIndex_t) ::
            IsValid(testInstrs[indW]) ==>
            (
                IsStore(testInstrs[indW]) && SamePhysicalAddress(testInstrs[ind1], testInstrs[indW]) ==>
                    AddEdge(nodes[ind1].Execute, nodes[indW].Writeback)
            )
    )
);

//Litmus test instrs.
const testInstrs : test_t;

//Node definitions.
const nodes : [instrIndex_t]nodeList_t;

// positiveTimestamps 
axiom forall (ind : instrIndex_t) ::
    (
        nodes[ind].Fetch.nTime > 0 &&
        nodes[ind].Execute.nTime > 0 &&
        nodes[ind].Writeback.nTime > 0
    );

// readableTimestamps 
axiom forall (ind : instrIndex_t) ::
    (
        nodes[ind].Fetch.nTime < maxTimestamp &&
        nodes[ind].Execute.nTime < maxTimestamp &&
        nodes[ind].Writeback.nTime < maxTimestamp
    );

// TurnOff 
// axiom forall (ind : instrIndex_t) ::
//     (
//         testInstrs[ind].valid == false &&
//         nullified(nodes[ind].Fetch) &&
//         nullified(nodes[ind].Execute) &&
//         nullified(nodes[ind].Writeback)
//     );


// Read_Values 
axiom forall (ind1 : instrIndex_t) ::
    IsValid(testInstrs[ind1]) ==>
    (
        IsLoad(testInstrs[ind1]) ==>
        (
            (
                NoWritesBetweenSourceAndRead(ind1, testInstrs, nodes) &&
                BeforeOrAfterEveryWriteToSamePA(ind1, testInstrs, nodes)
            )
            ||
            BeforeAllWrites(ind1, testInstrs, nodes)
        )
    );


// Load_Path 
axiom forall (ind : RANGE) ::
    IsValid(testInstrs[ind]) ==>
        (
            IsLoad(testInstrs[ind]) ==>
            (
                AddEdge(nodes[ind].Fetch, nodes[ind].Execute) &&
                AddEdge(nodes[ind].Execute, nodes[ind].Writeback)
            )
        );

// Store_Path 
axiom forall (ind : RANGE) ::
    IsValid(testInstrs[ind]) ==>
        (
            IsStore(testInstrs[ind]) ==>
            (
                AddEdge(nodes[ind].Fetch, nodes[ind].Execute) &&
                AddEdge(nodes[ind].Execute, nodes[ind].Writeback)
            )
        );

// PO_Fetch 
axiom forall (ind1 : RANGE, ind2 : RANGE) ::
    (IsValid(testInstrs[ind1]) && IsValid(testInstrs[ind2])) ==>
        (
            ProgramOrder(testInstrs[ind1], testInstrs[ind2]) ==>
                AddEdge(nodes[ind1].Fetch, nodes[ind2].Fetch)
        );

// Fetch_In_Order 
axiom forall (ind1 : RANGE, ind2 : RANGE) ::
    (IsValid(testInstrs[ind1]) && IsValid(testInstrs[ind2])) ==>
        (
            SameCore(testInstrs[ind1], testInstrs[ind2]) && EdgeExists(nodes[ind1].Fetch, nodes[ind2].Fetch) ==>
                AddEdge(nodes[ind1].Execute, nodes[ind2].Execute)
        );

// Decode_In_Order 
axiom forall (ind1 : RANGE, ind2 : RANGE) ::
    (IsValid(testInstrs[ind1]) && IsValid(testInstrs[ind2])) ==>
        (
            SameCore(testInstrs[ind1], testInstrs[ind2]) && EdgeExists(nodes[ind1].Execute, nodes[ind2].Execute) ==>
                AddEdge(nodes[ind1].Writeback, nodes[ind2].Writeback)
        );

// Enforce_Write_Ordering 
axiom forall (ind1 : RANGE, ind2 : RANGE) ::
    (IsValid(testInstrs[ind1]) && IsValid(testInstrs[ind2])) ==>
        (
            SameCore(testInstrs[ind1], testInstrs[ind2]) && IsStore(testInstrs[ind1]) && IsLoad(testInstrs[ind1]) &&
            ProgramOrder(testInstrs[ind1], testInstrs[ind2]) ==>
                AddEdge(nodes[ind1].Writeback, nodes[ind2].Execute)
        );

// Write_Serialization 
axiom forall (ind1 : RANGE, ind2 : RANGE) ::
    (IsValid(testInstrs[ind1]) && IsValid(testInstrs[ind2])) ==>
        (
            IsStore(testInstrs[ind1]) && IsStore(testInstrs[ind2]) && !SameMicroop(testInstrs[ind1],testInstrs[ind2]) &&
            SamePhysicalAddress(testInstrs[ind1], testInstrs[ind2]) ==>
            (
                AddEdge(nodes[ind1].Writeback, nodes[ind2].Writeback) ||
                AddEdge(nodes[ind2].Writeback, nodes[ind1].Writeback)
            )
        );

//Litmus test mp.
// ax1
axiom testInstrs[zero].valid == true;
// ax2
axiom testInstrs[zero].globalID == 0;
// ax3
axiom testInstrs[zero].coreID == 0;
// ax4
axiom testInstrs[zero].uopType == Write;
// ax5
axiom testInstrs[zero].physAddr == 0; //x
// ax6
axiom testInstrs[zero].data == 1;

// ax7
axiom testInstrs[one].valid == true;
// ax8
axiom testInstrs[one].globalID == 1;
// ax9
axiom testInstrs[one].coreID == 0;
// ax10
axiom testInstrs[one].uopType == Write;
// ax11
axiom testInstrs[one].physAddr == 1; //y
// ax12
axiom testInstrs[one].data == 1;

// ax13
axiom testInstrs[two].valid == true;
// ax14
axiom testInstrs[two].globalID == 2;
// ax15
axiom testInstrs[two].coreID == 1;
// ax16
axiom testInstrs[two].uopType == Read;
// ax17
axiom testInstrs[two].physAddr == 1; //y
// ax18
axiom testInstrs[two].data == 1;

// ax19
axiom testInstrs[three].valid == true;
// ax20
axiom testInstrs[three].globalID == 3;
// ax21
axiom testInstrs[three].coreID == 1;
// ax22
axiom testInstrs[three].uopType == Read;
// ax23
axiom testInstrs[three].physAddr == 0; //x
// ax24
axiom testInstrs[three].data == 0;


module main {
    control {
        check_sat;
    }
}
