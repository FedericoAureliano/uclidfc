// UCLID TEST
// Solver=z3
// Result=Some(false)

// Declare machine reference types
type AbstractServerMachine_ref_t = enum {server_a};
type ClientMachine_ref_t = enum {client_a};
const default_server: AbstractServerMachine_ref_t;
const default_client: ClientMachine_ref_t;

// Declare event types
type eRequest_t = record {source: ClientMachine_ref_t, target: AbstractServerMachine_ref_t, id : integer};
type eResponse_t = record {source: AbstractServerMachine_ref_t, target: ClientMachine_ref_t, id : integer, success: boolean};

// Declare event queue types
type eRequest_queue = record {start: integer, end: integer, data: [integer]eRequest_t};
type eResponse_queue = record {start: integer, end: integer, data: [integer]eResponse_t};

// Declare event queue helpers
define pop_request(q: eRequest_queue) : eRequest_queue = eRequest_queue(q.start + 1, q.end, q.data);
define peak_request(q: eRequest_queue) : eRequest_t = q.data[q.start];
define push_request(q: eRequest_queue, r : eRequest_t) : eRequest_queue = eRequest_queue(q.start, q.end + 1, q.data[q.end -> r]);
define init_requests() : eRequest_queue = eRequest_queue(0, 0, const(eRequest_t(default_client, default_server, 0), [integer]eRequest_t));
define is_empty_requests(q: eRequest_queue) : boolean = q.end <= q.start;
define requests_size(q: eRequest_queue) : integer = q.end - q.start; // only with integers

define pop_response(q: eResponse_queue) : eResponse_queue = eResponse_queue(q.start + 1, q.end, q.data);
define peak_response(q: eResponse_queue) : eResponse_t = q.data[q.start];
define push_response(q: eResponse_queue, r: eResponse_t) : eResponse_queue = eResponse_queue(q.start, q.end + 1, q.data[q.end -> r]);
define init_responses() : eResponse_queue = eResponse_queue(0, 0, const(eResponse_t(default_server, default_client, 0, false), [integer]eResponse_t));
define is_empty_responses(q: eResponse_queue) : boolean = q.end <= q.start;
define responses_size(q: eResponse_queue) : integer = q.end - q.start; // only with integers

// declare machines
module AbstractServerMachine {
    
    sharedvar eRequest_from_ClientMachine : eRequest_queue;
    sharedvar eResponse_to_ClientMachine : eResponse_queue;

    var success : boolean;
    
    init
    {
        eRequest_from_ClientMachine = init_requests();
        eResponse_to_ClientMachine = init_responses();
    }// End of init block

    next
    {
        if (!is_empty_requests(eRequest_from_ClientMachine)) {
            havoc success;
            // send a response
            let top = peak_request(eRequest_from_ClientMachine);
            eResponse_to_ClientMachine = push_response(eResponse_to_ClientMachine, eResponse_t(top.target, top.source, top.id, success));
            // pop request
            eRequest_from_ClientMachine = pop_request(eRequest_from_ClientMachine);
        }
    }// End of next block

} // End of AbstractServerMachine module

module ClientMachine {
    sharedvar eResponse_from_AbstractServerMachine : eResponse_queue;
    sharedvar eRequest_to_AbstractServerMachine : eRequest_queue;
    
    var entry : boolean;
    
    // Declare local variables
    var server : AbstractServerMachine_ref_t;
    var next_id : integer;
    var last_id : integer;

    var this : ClientMachine_ref_t;

    // ghosts
    var ghost_last_id : integer;

    init
    {
        next_id = 1;
        last_id = 0;
        entry = true;

        eResponse_from_AbstractServerMachine = init_responses();
        eRequest_to_AbstractServerMachine = init_requests();

        ghost_last_id = 0;
    }// End of init block

    next
    {
        ghost_last_id = last_id;
        if (entry) {
            // send request
            eRequest_to_AbstractServerMachine = push_request(eRequest_to_AbstractServerMachine, eRequest_t(this, server, next_id));
            next_id = next_id + 1;
            entry = false;
        } else {
            if (!is_empty_responses(eResponse_from_AbstractServerMachine)) {
                last_id = peak_response(eResponse_from_AbstractServerMachine).id;
                eResponse_from_AbstractServerMachine = pop_response(eResponse_from_AbstractServerMachine);
                entry = true;
            }
        }
    }// End of next block

} // End of ClientMachine module

type cases = enum {client_to_server, server_to_client};

module main {
    var sinstances : [AbstractServerMachine_ref_t]AbstractServerMachine;
    var cinstances : [ClientMachine_ref_t]ClientMachine;
    var schoice: AbstractServerMachine_ref_t;
    var cchoice: ClientMachine_ref_t;
    var sstep: boolean;
    var cstep: boolean;

    var mediate: boolean;

    var AbstractServerMachine_tmp : AbstractServerMachine_ref_t;
    var ClientMachine_tmp : ClientMachine_ref_t;

    var case_switch : cases;

    next {
        havoc mediate;
        if (mediate) {
            havoc case_switch;
            case 
            (case_switch == server_to_client) : {
                havoc AbstractServerMachine_tmp;
                let server_responses = sinstances[AbstractServerMachine_tmp].eResponse_to_ClientMachine;
                if (!is_empty_responses(server_responses)) {
                    let top = peak_response(server_responses);
                    let client_responses = cinstances[top.target].eResponse_from_AbstractServerMachine;
                    // send to client
                    cinstances[top.target].eResponse_from_AbstractServerMachine = push_response(client_responses, top);
                    // remove from server
                    sinstances[AbstractServerMachine_tmp].eResponse_to_ClientMachine = pop_response(server_responses);
                }
            }
            (case_switch == client_to_server) : {
                havoc ClientMachine_tmp;
                let client_requests = cinstances[ClientMachine_tmp].eRequest_to_AbstractServerMachine;
                if (!is_empty_requests(client_requests)) {
                    let top = peak_request(client_requests);
                    let server_requests = sinstances[top.target].eRequest_from_ClientMachine;
                    // send to server
                    sinstances[top.target].eRequest_from_ClientMachine = push_request(server_requests, top);
                    // remove from client
                    cinstances[ClientMachine_tmp].eRequest_to_AbstractServerMachine = pop_request(client_requests);
                }
            }
            esac
        } else {
            if (cstep) {
                havoc cstep;
                havoc cchoice;
                next(cinstances[cchoice]);
            }
            if (sstep) {
                havoc sstep;
                havoc schoice;
                next(sinstances[schoice]);
            }
        }
    }

    invariant assertion: !is_empty_responses(cinstances[client_a].eResponse_from_AbstractServerMachine) ==> 
        peak_response(cinstances[client_a].eResponse_from_AbstractServerMachine).id > cinstances[client_a].ghost_last_id;

    invariant max_one_event_in_whole_system: 
        responses_size(sinstances[server_a].eResponse_to_ClientMachine) + 
        responses_size(cinstances[client_a].eResponse_from_AbstractServerMachine) + 
        requests_size(sinstances[server_a].eRequest_from_ClientMachine) + 
        requests_size(cinstances[client_a].eRequest_to_AbstractServerMachine) <= 1;

    invariant entry_means_everything_empty: cinstances[client_a].entry ==>
        responses_size(sinstances[server_a].eResponse_to_ClientMachine) + 
        responses_size(cinstances[client_a].eResponse_from_AbstractServerMachine) + 
        requests_size(sinstances[server_a].eRequest_from_ClientMachine) + 
        requests_size(cinstances[client_a].eRequest_to_AbstractServerMachine) == 0;

    invariant sizes_never_negative: 
        responses_size(sinstances[server_a].eResponse_to_ClientMachine) >= 0 &&
        responses_size(cinstances[client_a].eResponse_from_AbstractServerMachine) >= 0 &&
        requests_size(sinstances[server_a].eRequest_from_ClientMachine) >= 0 &&
        requests_size(cinstances[client_a].eRequest_to_AbstractServerMachine) >= 0;

    invariant sizes_never_gt_1: 
        responses_size(sinstances[server_a].eResponse_to_ClientMachine) <= 1 &&
        responses_size(cinstances[client_a].eResponse_from_AbstractServerMachine) <= 1 &&
        requests_size(sinstances[server_a].eRequest_from_ClientMachine) <= 1 &&
        requests_size(cinstances[client_a].eRequest_to_AbstractServerMachine) <= 1;

    invariant every_event_id_gt_last_id: 
        (!is_empty_requests(cinstances[client_a].eRequest_to_AbstractServerMachine) ==> 
            peak_request(cinstances[client_a].eRequest_to_AbstractServerMachine).id == cinstances[client_a].next_id - 1) &&
        (!is_empty_requests(sinstances[server_a].eRequest_from_ClientMachine) ==> 
            peak_request(sinstances[server_a].eRequest_from_ClientMachine).id == cinstances[client_a].next_id - 1) &&
        (!is_empty_responses(sinstances[server_a].eResponse_to_ClientMachine) ==> 
            peak_response(sinstances[server_a].eResponse_to_ClientMachine).id == cinstances[client_a].next_id - 1) &&
        (!is_empty_responses(cinstances[client_a].eResponse_from_AbstractServerMachine) ==> 
            peak_response(cinstances[client_a].eResponse_from_AbstractServerMachine).id == cinstances[client_a].next_id - 1);

    invariant next_gt_last: 
        cinstances[client_a].next_id - cinstances[client_a].last_id > 1 || 
        (cinstances[client_a].entry && cinstances[client_a].next_id - cinstances[client_a].last_id == 1);

    invariant ghost_trails_real: cinstances[client_a].last_id >= cinstances[client_a].ghost_last_id;

    invariant all_ids_gte_zero: cinstances[client_a].last_id >= 0 && cinstances[client_a].next_id >= 0 && cinstances[client_a].ghost_last_id >= 0;

    control {
        induction;
        set_solver_option("timeout", "5000");
        check;
        print_cex(
            responses_size(cinstances[client_a].eResponse_from_AbstractServerMachine),
            peak_response(cinstances[client_a].eResponse_from_AbstractServerMachine).id,
            cinstances[client_a].next_id,
            cinstances[client_a].last_id,
            cinstances[client_a].ghost_last_id
        );
    }
}